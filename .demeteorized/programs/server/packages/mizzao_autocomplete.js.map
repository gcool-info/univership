{"version":3,"file":"/packages/mizzao:autocomplete.js","sources":["mizzao:autocomplete/autocomplete-server.coffee"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,MAAM,CAAC,OAAP,CAAe,wBAAf,EAAyC,SAAC,QAAD,EAAW,OAAX,EAAoB,QAApB;AACvC;eAAa,MAAO,UAApB;AACA;AACE,UAAU,UAAM,WAAW,wDAAjB,CAAV,CADF;GADA;AAMA,iBAAiB,CAAC,WAAX,EAAP;AACE,UAAM,CAAC,MAAP,CAAc,WAAW,sNAAzB;AACA,WAAO,EAAP,CAFF;GANA;EAUA,MAAM,IAVN;AAaA,MAAyD,OAAO,CAAC,KAAjE;WAAO,CAAC,KAAR,GAAgB,IAAI,CAAC,GAAL,CAAS,EAAT,EAAa,IAAI,CAAC,GAAL,CAAS,OAAO,CAAC,KAAjB,CAAb,CAAhB;GAbA;EAgBA,SAAS,UAAU,CAAC,IAAX,CAAgB,QAAhB,EAA0B,OAA1B,CAAkC,CAAC,cAAnC,CACP;WAAO,SAAC,EAAD,EAAK,MAAL;aACL,GAAG,CAAC,KAAJ,CAAU,qBAAV,EAAiC,EAAjC,EAAqC,MAArC,EADK;KAAP;IAEA,SAAS,SAAC,EAAD,EAAK,MAAL;aACP,GAAG,CAAC,OAAJ,CAAY,qBAAZ,EAAmC,EAAnC,EAAuC,MAAvC,EADO;KAFT;IAIA,SAAS,SAAC,EAAD;aACP,GAAG,CAAC,OAAJ,CAAY,qBAAZ,EAAmC,EAAnC,EADO;KAJT;GADO,CAhBT;EAwBA,GAAG,CAAC,KAAJ,EAxBA;SAyBA,GAAG,CAAC,MAAJ,CAAW;WAAG,MAAM,CAAC,IAAP,GAAH;GAAX,EA1BuC;CAAzC;A","sourcesContent":["Meteor.publish 'autocomplete-recordset', (selector, options, collName) ->\n  collection = global[collName]\n  unless collection\n    throw new Error(collName + ' is not defined on the global namespace of the server.')\n\n  # This is a semi-documented Meteor feature:\n  # https://github.com/meteor/meteor/blob/devel/packages/mongo-livedata/collection.js\n  unless collection._isInsecure()\n    Meteor._debug(collName + ' is a secure collection, therefore no data was returned because the client could compromise security by subscribing to arbitrary server collections via the browser console. Please write your own publish function.')\n    return [] # We need this for the subscription to be marked ready\n\n  sub = this\n\n  # guard against client-side DOS: hard limit to 50\n  options.limit = Math.min(50, Math.abs(options.limit)) if options.limit\n\n  # Push this into our own collection on the client so they don't interfere with other publications of the named collection.\n  handle = collection.find(selector, options).observeChanges\n    added: (id, fields) ->\n      sub.added('autocompleteRecords', id, fields)\n    changed: (id, fields) ->\n      sub.changed('autocompleteRecords', id, fields)\n    removed: (id) ->\n      sub.removed('autocompleteRecords', id)\n\n  sub.ready()\n  sub.onStop -> handle.stop()\n"]}